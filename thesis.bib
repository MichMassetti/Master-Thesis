@book{KeYBook2016,
  editor       = {Wolfgang Ahrendt and Bernhard Beckert and Richard Bubel and
                  Reiner H{\"a}hnle and Peter H. Schmitt and Mattias Ulbrich},
  title        = {Deductive Software Verification - The {Ke\kern-.1em Y} Book: From Theory
                  to Practice},
  series       = {Lecture Notes in Computer Science},
  volume       = {10001},
  publisher    = {Springer},
  doi          = {10.1007/978-3-319-49812-6},
  year         = {2016}
}

@article{mittelbach2014,
  author = {Frank Mittelbach},
  title = {How to influence the position of float environments like figure and table in \LaTeX?},
  journal = {TUGboat},
  year = {2014},
  volume = {35},
  pages = {248--254},
  url = {https://www.latex-project.org/publications/tb111mitt-float.pdf},
}

@incollection{SolcVerify,
	doi = {10.1007/978-3-030-41600-3_11},
  
	url = {https://doi.org/10.1007%2F978-3-030-41600-3_11},
  
	year = 2020,
	publisher = {Springer International Publishing},
  
	pages = {161--179},
  
	author = {{\'{A}
}kos Hajdu and Dejan Jovanovi{\'{c}}},
  
	title = {solc-verify: A Modular Verifier for Solidity Smart Contracts},
  
	booktitle = {Lecture Notes in Computer Science}
}
@unknown{SolcVerify_2,
author = {Hajdu, Ákos and Jovanović, Dejan and Ciocarlie, Gabriela},
year = {2020},
month = {05},
pages = {},
title = {Formal Specification and Verification of Solidity Contracts with Events}
}
@misc {SolcVerify_3, author = {{\'{A}
}kos Hajdu and Dejan Jovanovi{\'{c}}}, 
title = {SolcVerify}, 
year = {2021}, 
publisher = {GitHub}, 
journal = {GitHub repository}, 
howpublished = {\ url {https://github.com/SRI-CSL/solidity/blob/0.7/SOLC-VERIFY-README.md}}, 
commit = {0106cfb19b1c30f394ae0e3ed27ac36727502475 }}  

@inproceedings{Echidna,
author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
title = {Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts},
year = {2020},
isbn = {9781450380089},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3395363.3404366},
doi = {10.1145/3395363.3404366},
abstract = {Ethereum smart contracts---autonomous programs that run on a blockchain---often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
booktitle = {Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {557–560},
numpages = {4},
keywords = {fuzzing, smart contracts, test generation},
location = {Virtual Event, USA},
series = {ISSTA 2020}
}
@inproceedings{Slither,
	doi = {10.1109/wetseb.2019.00008},
  
	url = {https://doi.org/10.1109%2Fwetseb.2019.00008},
  
	year = 2019,
	month = {may},
  
	publisher = {IEEE},
  
	author = {Josselin Feist and Gustavo Grieco and Alex Groce},
  
	title = {Slither: A Static Analysis Framework for Smart Contracts},
  
	booktitle = {2019 {IEEE}/{ACM} 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain ({WETSEB})}
}
@misc{SlitherGitHub,
  title = {Slither},
  year = {2019},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/crytic/slither}},
  commit = {4f57d6a0e4c030202a07a60bc1bb1ed1544bf679}
}  
@inproceedings{Mythril,
author = {Bernhard Mueller},
title = {Smashing ethereum smart contracts for fun and real
profit},
year = {2018},
publisher = {In 9th Annual HITB Security Conference (HITBSecConf)},
address = {Amsterdam, Netherlands},
url = {https://github.com/muellerberndt/smashing-smart-contracts/blob/master/smashing-smart-contracts-1of1.pdf},
}
@misc{SWCRegistry,
  title = {SmartContractSecurity. SWC Registry},
  year= {2020},
  howpublished = {\url{ https://swcregistry.io/}},
  note = {Accessed: 2022-04-15}
}

@misc{XSurgeBNB,
  title = {XSURGE on the BSC Chain was Attacked by Lightning Loans — A Full Analysis},
  year= {2021},
  howpublished = {\url{ https://beosin.medium.com/a-sweet-blow-fb0a5e08657d}},
  note = {Accessed: 2022-04-15}
}
@misc{XSurgeWeb,
  title = {xSurge Assets},
  year= {2021},
  howpublished = {\url{ https://xsurge.net/surge-assets}},
  note = {Accessed: 2022-04-15}
}
@misc{CloudFareDos,
  title = {What is a denial-of-service attack},
  year= {2022},
  howpublished = {\url{ https://www.cloudflare.com/it-it/learning/ddos/glossary/denial-of-service/}},
  note = {Accessed: 2022-04-15}
}
@misc{Dos1,
  title = {Solidity Vulnerability: Denial of Service (DoS)},
  year= {2022},
  author={Derek Arends},
  howpublished = {\url{ https://www.derekarends.com/solidity-vulnerability-denial-of-service-dos/}},
  note = {Accessed: 2022-04-16}
}
@inproceedings {SmarTest,
author = {Sunbeom So and Seongjoon Hong and Hakjoo Oh},
title = {{SmarTest}: Effectively Hunting Vulnerable Transaction Sequences in Smart Contracts through Language {Model-Guided} Symbolic Execution},
booktitle = {30th USENIX Security Symposium (USENIX Security 21)},
year = {2021},
isbn = {978-1-939133-24-3},
pages = {1361--1378},
url = {https://www.usenix.org/conference/usenixsecurity21/presentation/so},
publisher = {USENIX Association},
month = aug,
}
@misc{bZxProtocol,
  title = {bZx Documentation},
  year= {2020},
  howpublished = {\url{ https://docs.bzx.network/}},
  note = {Accessed: 2022-04-20}
}
@misc{bZxAttack,
  author={Andrey Shevchenko},
  title = {DeFi platform bZX sees new $8M hack from one misplaced line of code },
  year= {2020},
  howpublished = {\url{https://cointelegraph.com/news/defi-platform-bzx-sees-new-8m-hack-from-one-misplaced-line-of-code}},
  note = {Accessed: 2022-04-20}
}
@misc{RugPullDef,
  author={Valerio Puggioni},
  title = {Crypto rug pulls: What is a rug pull in crypto and 6 ways to spot it  },
  year= {2022},
  howpublished = {\url{https://cointelegraph.com/explained/crypto-rug-pulls-what-is-a-rug-pull-in-crypto-and-6-ways-to-spot-it}},
  note = {Accessed: 2022-04-21}
}

@misc{CBDAO,
  author={Green JEFF},
  title = {CBDAO Exitscammed: Moving Forward as a Community },
  year= {2020},
  howpublished = {\url{https://cointelegraph.com/explained/crypto-rug-pulls-what-is-a-rug-pull-in-crypto-and-6-ways-to-spot-it}},
  note = {Accessed: 2022-04-21}
}
@misc{VeriSmart,
  doi = {10.48550/ARXIV.1908.11227},
  
  url = {https://arxiv.org/abs/1908.11227},
  
  author = {So, Sunbeom and Lee, Myungho and Park, Jisu and Lee, Heejo and Oh, Hakjoo},
  
  keywords = {Programming Languages (cs.PL), Cryptography and Security (cs.CR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {VeriSmart: A Highly Precise Safety Verifier for Ethereum Smart Contracts},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {Creative Commons Attribution Non Commercial Share Alike 4.0 International}
}

@misc{RaceConditionDef,

  title = {Race conditions and deadlocks},
  year= {2020},
  howpublished = {\url{https://docs.microsoft.com/en-us/troubleshoot/developer/visualstudio/visual-basic/language-compilers/race-conditions-deadlocks}},
  publisher = {Microsoft},
  note = {Accessed: 2022-04-22}
}

@misc {NotSoSmartContracts, 
title = {(Not So) Smart Contracts}, 
year = {2020}, 
publisher = {GitHub}, 
journal = {GitHub repository}, 
howpublished = {\ url {https://github.com/crytic/not-so-smart-contracts}}, 
commit = {b1500700cd765bfcb2eacc71c05762865764d43e},
author={Crytic},
}  
@misc{Bitcoin,  
  url = {https://bitcoin.org/bitcoin.pdf},
  
  author = {Satoshi Nakamoto},
    
  title = {Bitcoin: A Peer-to-Peer Electronic Cash System},
  
  publisher = {bitcoin.org},
  
  year = {2008},  
}
@misc{Ethereum,  
  url = {https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf},
  
  author = {Vitalik Buterin},
    
  title = {Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform},
  
  publisher = {https://ethereum.org},
  
  year = {2014},  
}
@misc{CoverProtocolExploit,  
  url={https://ciphertrace.com/infinite-minting-exploit-nets-attacker-4-4m/},

    
  title = {Infinite Minting Exploit Nets Attacker $4.4M},
  
  publisher = {https://ciphertrace.com/},
  
  year = {2020},  
}

@misc{CoverProtocolPostMortem,  
  url={https://coverprotocol.medium.com/12-28-post-mortem-34c5f9f718d4},

  author={Cover Protocol},
    
  title = {12/28 Post-Mortem},
  
  publisher = {https://coverprotocol.medium.com},
  
  year = {2020},  
}

@misc{CoverProtocol,  
  url={https://defiprime.com/cover-protocol},
  author={Nick Sawinyh},
  title = {Cover Protocol - Decentralized Insurance Marketplace},
  
  publisher = {https://defiprime.com},
  
  year = {2021} 
}

@misc{Aku,  
  url={https://bitcoinist.com/nft-project-aku-dreams-loses-34-million-to-smart-contract-flaw/},
  author={Saeed Hassan},
  title = {NFT Project Aku Dreams Loses \$34 Million To Smart Contract Flaw},
  
  publisher = {https://bitcoinist.com},
  
  year = {2022} 
}

@misc{BurgerSwap,  
  url={https://zengo.com/burgerswap-vulnerability/},
  author={Oded Leiba},
  title = {Reentering the Reentrancy Bug: Disclosing BurgerSwap's Vulnerability},
  publisher = {https://zengo.com},
  year = {2020} 
}
@misc{UraniumTech,
  url={https://medium.com/shentu-foundation/uranium-finance-exploit-analysis-d135055d6a6a},
  author={Certik team},
  title = {Uranium Finance Exploit Analysis},
  publisher = {Shentu Foundation},
  year = {2021} 
}
@misc{UraniumPM,  
  url={https://uraniumfinance.medium.com/uranium-post-mortem-v2-compensations-aac4b0706d7d},
  author={Uranium Finance},
  title = {Uranium : post-mortem, v2, compensations},
  publisher = {https://uraniumfinance.medium.com},
  year = {2021} 
}
@misc{Spartan,
  url={https://medium.com/amber-group/exploiting-spartan-protocols-lp-share-calculation-flaws-391437855e74},
  author={Amber Group},
  title={Exploiting Spartan Protocol's LP-Share Calculation Flaws},
  publisher={https://medium.com/amber-group/},
  year = {2021}
}
@misc{FlashCoin,
  url={https://www.coindesk.com/learn/2021/02/17/what-is-a-flash-loan/},
  author={Alyssa Hertig},
  title={What Is a Flash Loan?},
  publisher={https://www.coindesk.com//},
  year = {2022}
}
@misc{FlashCloud,
  url={https://10clouds.com/blog/defi/understanding-flash-loans-in-defi/},
  author={Dennis Van der Vecht},
  title={Understanding Flash Loans In DeFi},
  publisher={https://10clouds.com/},
  year = {2022}
}
@techreport{CelestialPaper,
author = {Dharanikota, Samvid and Mukherjee, Suvam and Bhardwaj, Chandrika and Rastogi, Aseem and Lal, Akash},
title = {Celestial: A Smart Contracts Verification Framework},
institution = {Microsoft},
year = {2020},
month = {December},
abstract = {We present Celestial, a framework for formally verifying smart contracts written in the Solidity language for the Ethereum blockchain.  Celestial allows programmers to write expressive functional specifications for their contracts. It translates the contracts and the specifications to F* to formally verify, against an F* model of the blockchain semantics, that the contracts meet their specifications. Once the verification succeeds, Celestial performs an erasure of the specifications to generate Solidity code for execution on the Ethereum blockchain. We use Celestial to verify several real-world smart contracts from different application domains such as tokens, digital wallets, and governance. Our experience shows that Celestial is a valuable tool for writing high-assurance smart contracts.},
url = {https://www.microsoft.com/en-us/research/publication/celestial-a-smart-contracts-verification-framework/},
number = {MSR-TR-2020-43},
}
@misc{CertoraDocumentation,
  url={https://docs.certora.com/en/latest/index.html},
  author={Certora},
  title={Certora Documentation},
  publisher={https://certora.atlassian.net/},
  year = {2022}
}
@misc{ManticorePaper,
  doi = {10.48550/ARXIV.1907.03890},
  
  url = {https://arxiv.org/abs/1907.03890},
  
  author = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
  
  keywords = {Software Engineering (cs.SE), Cryptography and Security (cs.CR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

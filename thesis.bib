
@incollection{SolcVerify,
	doi = {10.1007/978-3-030-41600-3_11},
  
	url = {https://doi.org/10.1007%2F978-3-030-41600-3_11},
  
	year = 2020,
	publisher = {Springer International Publishing},
  
	pages = {161--179},
  
	author = {{\'{A}
}kos Hajdu and Dejan Jovanovi{\'{c}}},
  
	title = {solc-verify: A Modular Verifier for Solidity Smart Contracts},
  
	booktitle = {Lecture Notes in Computer Science}
}
@unknown{SolcVerify_2,
author = {Hajdu, Ákos and Jovanović, Dejan and Ciocarlie, Gabriela},
year = {2020},
month = {05},
pages = {},
title = {Formal Specification and Verification of Solidity Contracts with Events}
}
@misc {SolcVerify_3, author = {{\'{A}
}kos Hajdu and Dejan Jovanovi{\'{c}}}, 
title = {SolcVerify}, 
year = {2021}, 
publisher = {GitHub}, 
journal = {GitHub repository}, 
howpublished = {https://github.com/SRI-CSL/solidity/blob/0.7/SOLC-VERIFY-README.md}, 
commit = {0106cfb19b1c30f394ae0e3ed27ac36727502475 }}  

@inproceedings{Echidna,
author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
title = {Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts},
year = {2020},
isbn = {9781450380089},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3395363.3404366},
doi = {10.1145/3395363.3404366},
abstract = {Ethereum smart contracts---autonomous programs that run on a blockchain---often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.},
booktitle = {Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {557-560},
numpages = {4},
keywords = {fuzzing, smart contracts, test generation},
location = {Virtual Event, USA},
series = {ISSTA 2020}
}
@inproceedings{Slither,
	doi = {10.1109/wetseb.2019.00008},
  
	url = {https://doi.org/10.1109%2Fwetseb.2019.00008},
  
	year = 2019,
	month = {may},
  
	publisher = {IEEE},
  
	author = {Josselin Feist and Gustavo Grieco and Alex Groce},
  
	title = {Slither: A Static Analysis Framework for Smart Contracts},
  
	booktitle = {2019 {IEEE}/{ACM} 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain ({WETSEB})}
}
@misc{SlitherGitHub,
  title = {Slither},
  year = {2019},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/crytic/slither}},
  commit = {4f57d6a0e4c030202a07a60bc1bb1ed1544bf679}
}  
@inproceedings{Mythril,
author = {Bernhard Mueller},
title = {Smashing ethereum smart contracts for fun and real
profit},
year = {2018},
publisher = {In 9th Annual HITB Security Conference (HITBSecConf)},
address = {Amsterdam, Netherlands},
url = {https://github.com/muellerberndt/smashing-smart-contracts/blob/master/smashing-smart-contracts-1of1.pdf},
}
@misc{SWCRegistry,
  title = {SmartContractSecurity. SWC Registry},
  year= {2020},
  howpublished = {\url{ https://swcregistry.io/}},
  note = {Accessed: 2022-04-15}
}

@misc{XSurgeBNB,
  title = {XSURGE on the BSC Chain was Attacked by Lightning Loans — A Full Analysis},
  year= {2021},
  howpublished = {\url{ https://beosin.medium.com/a-sweet-blow-fb0a5e08657d}},
  note = {Accessed: 2022-04-15}
}
@misc{XSurgeWeb,
  title = {xSurge Assets},
  year= {2021},
  howpublished = {\url{ https://xsurge.net/surge-assets}},
  note = {Accessed: 2022-04-15}
}
@misc{CloudFareDos,
  title = {What is a denial-of-service attack},
  year= {2022},
  howpublished = {\url{ https://www.cloudflare.com/it-it/learning/ddos/glossary/denial-of-service/}},
  note = {Accessed: 2022-04-15}
}
@misc{Dos1,
  title = {Solidity Vulnerability: Denial of Service (DoS)},
  year= {2022},
  author={Derek Arends},
  howpublished = {\url{ https://www.derekarends.com/solidity-vulnerability-denial-of-service-dos/}},
  note = {Accessed: 2022-04-16}
}
@inproceedings {SmarTest,
author = {Sunbeom So and Seongjoon Hong and Hakjoo Oh},
title = {{SmarTest}: Effectively Hunting Vulnerable Transaction Sequences in Smart Contracts through Language {Model-Guided} Symbolic Execution},
booktitle = {30th USENIX Security Symposium (USENIX Security 21)},
year = {2021},
isbn = {978-1-939133-24-3},
pages = {1361--1378},
url = {https://www.usenix.org/conference/usenixsecurity21/presentation/so},
publisher = {USENIX Association},
month = aug,
}
@misc{bZxProtocol,
  title = {bZx Documentation},
  year= {2020},
  howpublished = {\url{ https://docs.bzx.network/}},
  note = {Accessed: 2022-04-20}
}
@misc{bZxAttack,
  author={Andrey Shevchenko},
  title = {DeFi platform bZX sees new $8M hack from one misplaced line of code },
  year= {2020},
  howpublished = {\url{https://cointelegraph.com/news/defi-platform-bzx-sees-new-8m-hack-from-one-misplaced-line-of-code}},
  note = {Accessed: 2022-04-20}
}
@misc{RugPullDef,
  author={Valerio Puggioni},
  title = {Crypto rug pulls: What is a rug pull in crypto and 6 ways to spot it  },
  year= {2022},
  howpublished = {\url{https://cointelegraph.com/explained/crypto-rug-pulls-what-is-a-rug-pull-in-crypto-and-6-ways-to-spot-it}},
  note = {Accessed: 2022-04-21}
}

@misc{CBDAO,
  author={Green JEFF},
  title = {CBDAO Exitscammed: Moving Forward as a Community },
  year= {2020},
  howpublished = {\url{https://cointelegraph.com/explained/crypto-rug-pulls-what-is-a-rug-pull-in-crypto-and-6-ways-to-spot-it}},
  note = {Accessed: 2022-04-21}
}
@misc{VeriSmart,
  doi = {10.48550/ARXIV.1908.11227},
  
  url = {https://arxiv.org/abs/1908.11227},
  
  author = {So, Sunbeom and Lee, Myungho and Park, Jisu and Lee, Heejo and Oh, Hakjoo},
  
  keywords = {Programming Languages (cs.PL), Cryptography and Security (cs.CR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {VeriSmart: A Highly Precise Safety Verifier for Ethereum Smart Contracts},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {Creative Commons Attribution Non Commercial Share Alike 4.0 International}
}

@misc{RaceConditionDef,

  title = {Race conditions and deadlocks},
  year= {2020},
  howpublished = {\url{https://docs.microsoft.com/en-us/troubleshoot/developer/visualstudio/visual-basic/language-compilers/race-conditions-deadlocks}},
  publisher = {Microsoft},
  note = {Accessed: 2022-04-22}
}

@misc {NotSoSmartContracts, 
title = {(Not So) Smart Contracts}, 
year = {2020}, 
publisher = {GitHub}, 
journal = {GitHub repository}, 
howpublished = {\ url {https://github.com/crytic/not-so-smart-contracts}}, 
commit = {b1500700cd765bfcb2eacc71c05762865764d43e},
author={Crytic},
}  
@misc{Bitcoin,  
  url = {https://bitcoin.org/bitcoin.pdf},
  
  author = {Satoshi Nakamoto},
    
  title = {Bitcoin: A Peer-to-Peer Electronic Cash System},
  
  publisher = {bitcoin.org},
  
  year = {2008},  
}
@misc{Ethereum,  
  url = {https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf},
  
  author = {Vitalik Buterin},
    
  title = {Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform},
  
  publisher = {https://ethereum.org},
  
  year = {2014},  
}
@misc{CoverProtocolExploit,  
  url={https://ciphertrace.com/infinite-minting-exploit-nets-attacker-4-4m/},

    
  title = {Infinite Minting Exploit Nets Attacker $4.4M},
  
  publisher = {https://ciphertrace.com/},
  
  year = {2020},  
}

@misc{CoverProtocolPostMortem,  
  url={https://coverprotocol.medium.com/12-28-post-mortem-34c5f9f718d4},

  author={Cover Protocol},
    
  title = {12/28 Post-Mortem},
  
  publisher = {https://coverprotocol.medium.com},
  
  year = {2020},  
}

@misc{CoverProtocol,  
  url={https://defiprime.com/cover-protocol},
  author={Nick Sawinyh},
  title = {Cover Protocol - Decentralized Insurance Marketplace},
  
  publisher = {https://defiprime.com},
  
  year = {2021} 
}

@misc{Aku,  
  url={https://bitcoinist.com/nft-project-aku-dreams-loses-34-million-to-smart-contract-flaw/},
  author={Saeed Hassan},
  title = {NFT Project Aku Dreams Loses \$34 Million To Smart Contract Flaw},
  
  publisher = {https://bitcoinist.com},
  
  year = {2022} 
}

@misc{BurgerSwap,  
  url={https://zengo.com/burgerswap-vulnerability/},
  author={Oded Leiba},
  title = {Reentering the Reentrancy Bug: Disclosing BurgerSwap's Vulnerability},
  publisher = {https://zengo.com},
  year = {2020} 
}
@misc{UraniumTech,
  url={https://medium.com/shentu-foundation/uranium-finance-exploit-analysis-d135055d6a6a},
  author={Certik},
  title = {Uranium Finance Exploit Analysis},
  publisher = {Shentu Foundation},
  year = {2021} 
}
@misc{UraniumPM,  
  url={https://uraniumfinance.medium.com/uranium-post-mortem-v2-compensations-aac4b0706d7d},
  author={Uranium Finance},
  title = {Uranium : post-mortem, v2, compensations},
  publisher = {https://uraniumfinance.medium.com},
  year = {2021} 
}
@misc{Spartan,
  url={https://medium.com/amber-group/exploiting-spartan-protocols-lp-share-calculation-flaws-391437855e74},
  author={Amber Group},
  title={Exploiting Spartan Protocol's LP-Share Calculation Flaws},
  publisher={https://medium.com/amber-group/},
  year = {2021}
}
@misc{FlashCoin,
  url={https://www.coindesk.com/learn/2021/02/17/what-is-a-flash-loan/},
  author={Alyssa Hertig},
  title={What Is a Flash Loan?},
  publisher={https://www.coindesk.com//},
  year = {2022}
}
@misc{FlashCloud,
  url={https://10clouds.com/blog/defi/understanding-flash-loans-in-defi/},
  author={Dennis Van der Vecht},
  title={Understanding Flash Loans In DeFi},
  publisher={https://10clouds.com/},
  year = {2022}
}
@techreport{CelestialPaper,
author = {Dharanikota, Samvid and Mukherjee, Suvam and Bhardwaj, Chandrika and Rastogi, Aseem and Lal, Akash},
title = {Celestial: A Smart Contracts Verification Framework},
institution = {Microsoft},
year = {2020},
month = {December},
abstract = {We present Celestial, a framework for formally verifying smart contracts written in the Solidity language for the Ethereum blockchain.  Celestial allows programmers to write expressive functional specifications for their contracts. It translates the contracts and the specifications to F* to formally verify, against an F* model of the blockchain semantics, that the contracts meet their specifications. Once the verification succeeds, Celestial performs an erasure of the specifications to generate Solidity code for execution on the Ethereum blockchain. We use Celestial to verify several real-world smart contracts from different application domains such as tokens, digital wallets, and governance. Our experience shows that Celestial is a valuable tool for writing high-assurance smart contracts.},
url = {https://www.microsoft.com/en-us/research/publication/celestial-a-smart-contracts-verification-framework/},
number = {MSR-TR-2020-43},
}
@misc{CertoraDocumentation,
  url={https://docs.certora.com/en/latest/index.html},
  author={Certora},
  title={Certora Documentation},
  publisher={https://certora.atlassian.net/},
  year = {2022}
}
@misc{ManticorePaper,
  doi = {10.48550/ARXIV.1907.03890},
  
  url = {https://arxiv.org/abs/1907.03890},
  
  author = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
  
  keywords = {Software Engineering (cs.SE), Cryptography and Security (cs.CR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}
@software{ManticoreGitHub,
author = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Greico, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
doi = {10.1109/ASE.2019.00133},
license = {AGPL-3.0},
month = {11},
title = {{Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts}},
url = {https://github.com/trailofbits/manticore},
year = {2019}
}
@software{SmarTestGitHub,
author = {So, Sunbeom and Lee, Myungho and Park, Jisu and Lee, Heejo and Oh, Hakjoo},
title = {VeriSmart GitHub},
url = {https://github.com/kupl/VeriSmart-public},
year = {2021}
}
@misc{NET,
  url={https://docs.microsoft.com/en-us/dotnet/core/introduction},
  author={Microft},
  title={DotNet Documentation},
  year = {2020}
}
@misc{statista,
  url={https://www.coingecko.com/},
  author= {Raynor de Best},
  publisher = {statista},
  title={Overall cryptocurrency market capitalization per week from July 2010 to September 2022},
  year={2022}
}
@misc{CoinGeko,
  url={https://www.coingecko.com/},
  author= {CoinGeko},
  title={CoinGeko Web Site},
  year={2022}
}
@misc{BcUseCases,
  url={https://www.coingecko.com/},
  author= {Consensys},
  title={Blockchain Use Cases and Applications by Industry},
  year={2021}
}
@InProceedings{Survey1,
author={Tang, Xiangyan and Zhou, Ke and Cheng, Jieren and Li, Hui
and Yuan, Yuming},
editor={Sun, Xingming
and Zhang, Xiaorui
and Xia, Zhihua
and Bertino, Elisa},
title={The Vulnerabilities in Smart Contracts: A Survey},
booktitle={Advances in Artificial Intelligence and Security},
year={2021},
publisher={Springer International Publishing},
address={Cham},
pages={177--190},
abstract={Blockchain has attracted widespread attention since its inception and one of the special technologies is smart contracts. Smart contracts are programs on blockchain that act as trusted intermediary between the users and are widely used in variety of industry (e.g., IoT, supply chain management). Smart contracts can store or manipulate valuable assets which may cause huge economic losses. Unlike traditional computer programs, the code of a smart contract cannot be modified after it is deployed on the blockchain. Hence, the security analysis and vulnerability detection of the smart contract must be performed before its deployment. In this survey, we considered 15 security vulnerabilities in smart contracts and introduced the vulnerable areas and the causes of vulnerabilities. According to the methods used, we introduced the existing smart contract analysis methods and vulnerability detection tools from three aspects of static analysis, dynamic analysis and formal verification. Finally, by considering the analysis tools and security vulnerabilities, we found that a new attack cannot be detected by existing detection tools if the vulnerability without pre-defined. We recommend using machine learning methods to analyze smart contracts in combination with traditional program vulnerabilities, and find vulnerabilities that have not yet been discovered in smart contracts. In addition, many detection tools require too much resources or are too complex, so it is necessary to introduce new detection methods.},
isbn={978-3-030-78621-2}
}
@INPROCEEDINGS{Survey2,

  author={di Angelo, Monika and Salzer, Gernot},

  booktitle={2019 IEEE International Conference on Decentralized Applications and Infrastructures (DAPPCON)}, 

  title={A Survey of Tools for Analyzing Ethereum Smart Contracts}, 

  year={2019},

  volume={},

  number={},

  pages={69-78},

  doi={10.1109/DAPPCON.2019.00018}
}
@misc{Survey3,
  doi = {10.48550/ARXIV.2008.02712},
  
  url = {https://arxiv.org/abs/2008.02712},
  
  author = {Tolmach, Palina and Li, Yi and Lin, Shang-Wei and Liu, Yang and Li, Zengxiang},
  
  keywords = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {A Survey of Smart Contract Formal Specification and Verification},
  
  publisher = {arXiv},
  
  year = {2020},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}
@ARTICLE{Survey4,  
author={Sayeed, Sarwar and Marco-Gisbert, Hector and Caira, Tom},  
journal={IEEE Access},   
title={Smart Contract: Attacks and Protections},   
year={2020},  
volume={8},  
pages={24416-24427},  
doi={10.1109/ACCESS.2020.2970495}
}

@phdthesis{thesis, 
 title={Systematic Review of Ethereum Smart Contract Security Vulnerabilities, Analysis Methods and Tools}, 
 school={Technische Universität Wien}, 
 author={Heidelind, Rameder}, 
 year={2021}, 
 pages={155}
}

@misc{OWASPFuzz,
  title={Fuzzing},
  url= {https://owasp.org/www-community/Fuzzing},
  author={OWASP},
  publisher={https://owasp.org/www-community}
} 
@incollection{FormalVerificationDef,
title = {Chapter 2 - Basic formal verification algorithms},
editor = {Erik Seligman and Tom Schubert and M V Achutha Kiran Kumar},
booktitle = {Formal Verification},
publisher = {Morgan Kaufmann},
address = {Boston},
pages = {23-47},
year = {2015},
isbn = {978-0-12-800727-3},
doi = {https://doi.org/10.1016/B978-0-12-800727-3.00002-2},
url = {https://www.sciencedirect.com/science/article/pii/B9780128007273000022},
author = {Erik Seligman and Tom Schubert and M V Achutha Kiran Kumar},
keywords = {Boolean logic, truth table, Binary Decision Diagram (BDD), Satisfiability (SAT), model checking, Boolean Constraint Propagation (BCP)},
abstract = {In Chapter 2 we describe some of the basic algorithms used to develop practical formal verification tools. We start by reviewing basics of formal logic representations, showing how clever exploitation of symmetry can vastly simplify seemingly complex logic. Building on this, we discuss some concepts of verification and of Boolean algebra. We then introduce BDDs, an important data structure which was responsible for enabling the first generation of industrial-strength model checking tools. After this, we discuss the Satisfiability (SAT) problem, a core challenge of FV which was briefly introduced in the previous chapter. In addition, we provide a brief discussion of model checking concepts and some advanced SAT algorithms. By the end of this chapter, the reader should have a general sense of how FV tools work, so this knowledge can inform their usage in the real design and validation processes we discuss in the rest of the book.}
}
@article{SymbolicExecution,
  author    = {Baldoni, Roberto and Coppa, Emilio and D'Elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
  title     = {A Survey of Symbolic Execution Techniques},
  journal   = {ACM Comput. Surv.},
  volume    = {51},
  number = {3},
  articleno = {50},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {2018}
}
@misc{DeFiDef,
  title={Decentralised finance: a new unregulated non-bank system?},
  url= {https://www.ecb.europa.eu/pub/financial-stability/macroprudential-bulletin/focus/2022/html/ecb.mpbu202207_focus1.en.html},
  author={Alexandra Born},
  publisher={European Central Bank}
} 
@misc{AMMDef,
  title={What Is an Automated Market Maker (AMM)?},
  url= {https://academy.binance.com/en/articles/what-is-an-automated-market-maker-amm},
  author={Binance Academy},
  publisher={Binance},
  year={2020}
} 
@misc{NFTValue,
  author       = {Dan Milmo},
  howpublished = {The Guardian online},
  title        = {NFTs market hits 22billions dollars as craze turns digital images into assets},
  year         = {2021},
  url          = {https://www.theguardian.com/technology/2021/dec/16/nfts-market-hits-22bn-as-craze-turns-digital-images-into-assets?CMP=Share_iOSApp_Other}
}
@misc{NFTDef,
  author       = {Rakesh Sharma},
  howpublished = {Investopedia},
  title        = {Non-Fungible Token (NFT): What It Means and How It Works},
  year         = {2022},
  url          = {https://www.investopedia.com/non-fungible-tokens-nft-5115211},
}
@misc{LiquidityDef,
  author       = {Binance Academy},
  howpublished = {https://academy.binance.com},
  title        = {Liquidity Explained},
  year         = {2022},
  url          = {https://academy.binance.com/en/articles/liquidity-explained},
}
@misc{SmartContractDef,
  author       = {Nick Szabo},
  title        = {Smart Contracts},
  year         = {1994},
  url          = {https://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart.contracts.html},
}
@ARTICLE{BlockChain1,  
author={Tschorsch, Florian and Scheuermann, Björn},  
journal={IEEE Communications Surveys and Tutorials},   
title={Bitcoin and Beyond: A Technical Survey on Decentralized Digital Currencies},   
year={2016},  
volume={18},  
number={3}, 
pages={2084-2123},  
doi={10.1109/COMST.2016.2535718}
}
@misc{EthDocs,
  author       = {Ethereum Foundation},
  url          = {https://ethereum.org/en/developers/docs/},
  title        = {Ethereum development documentation},
  year         = {2022}
}
@Inbook{DLT,
author="Sunyaev, Ali",
title="Distributed Ledger Technology",
bookTitle="Internet Computing: Principles of Distributed Systems and Emerging Internet-Based Technologies",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="265--299",
abstract="Distributed Ledger Technology (DLT) is one of the most promising innovations in the field of information technologies with the potential to change organization and collaboration in the economy, society, and industry. This chapter introduces the technical background and use cases of distributed ledger technology. It presents the major innovations originating from distributed ledger technology since the introduction of the blockchain concept. Furthermore, cryptocurrencies' historical background as a driver of fully decentralized distributed ledgers is outlined from their origins in the 1990s until the blockchain concept's introduction in 2009. DLT's technical principles are introduced to provide a sound understanding. Subsequently, the functioning of distributed ledger technology is illustrated by means of the Bitcoin blockchain example, which was the first fully decentralized cryptocurrency to not require a trusted authority (i.e., banks). Thereafter, smart contracts and the idea of decentralized applications are explained. Selected use cases for distributed ledger technology's application are subsequently discussed. This chapter concludes with a discussion of the prevailing challenges in the field of distributed ledger technology.",
isbn="978-3-030-34957-8",
doi="10.1007/978-3-030-34957-8_9",
url="https://doi.org/10.1007/978-3-030-34957-8_9"
}
@misc{CertoraGitHub,
  url={https://github.com/Certora/Tutorials},
  author={Certora},
  title={Certora Tutorials},
  year = {2022}
}
@misc{Ledger,
  url={https://www.iso.org/standard/73771.html},
  author={ISO 22739:2020},
  title={Blockchain and distributed ledger technologies — Vocabulary},
  year = {2010},
  publisher = {Online Browsing Platform (OBP)}
}
@misc{Consensus,
  url={https://www.techtarget.com/whatis/definition/consensus-algorithm},
  author={Rahul Awati},
  title={Consensus Algorithm},
  year = {2022},
  publisher = {Whatls.com}
}
@article{SmartContracts,
  author    = {Massimo Bartoletti and
               Salvatore Carta and
               Tiziana Cimoli and
               Roberto Saia},
  title     = {Dissecting Ponzi schemes on Ethereum: identification, analysis, and
               impact},
  journal   = {CoRR},
  volume    = {abs/1703.03779},
  year      = {2017},
  url       = {http://arxiv.org/abs/1703.03779},
  eprinttype = {arXiv},
  eprint    = {1703.03779},
  timestamp = {Mon, 13 Aug 2018 16:48:16 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/BartolettiCCS17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}@misc{stack,
   author = "Wikipedia",
   title = "{Stack machine} --- {W}ikipedia{,} The Free Encyclopedia",
   year = "2022",
   howpublished = {\url{http://en.wikipedia.org/w/index.php?title=Stack\%20machine&oldid=1107632072}},
   note = "[Online; accessed 29-September-2022]"
 }
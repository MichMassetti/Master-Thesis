import { Safe_Arith } from "./Safe_Arith.sol" ; 
contract Pool_Cel {
    using SafeMath for uint;

    address  BASE;
    address  TOKEN;

    
    uint totalSupply =10000;
    uint  decimals;
    // ERC-20 Mappings

    uint  baseAmount;
    uint  tokenAmount;
    uint  baseReal;
    uint  tokenReal;
    address th= address(this) ;
    

    mapping (address => uint) balanceToken;
    mapping (address => uint) balanceBase;
    mapping (address => uint) balancePool;
 

    function charge(uint v) public
        post new(balanceBase)[sender]==balanceBase[sender]+v && new(balanceToken)[sender]==balanceToken[sender]+v
    {
        balanceBase[sender]=safe_add(balanceBase[sender],v);
        balanceToken[sender]=safe_add(balanceToken[sender],v);
        return;
    }

    function safetranfer_base_pub(address _to, uint _value) public
        tx_reverts(value> balanceBase[sender])
        post new(balanceBase)[sender] <=balanceBase[sender]
        && new (balanceBase)[_to] >= balanceBase[_to]
        returns (bool success) 
    {
        if(value> balanceBase[sender])
            revert("error");
        balanceBase[sender] = safe_sub(balanceBase[sender], _value);
        balanceBase[_to] = safe_add(balanceBase[_to],_value);
        success=true;
        return success;
    }
    function safetranfer_base(address _to,address _from, uint _value) private
        tx_reverts(value> balanceBase[_from])
        post new(balanceBase)[_from] <=balanceBase[_from]
        && new (balanceBase)[_to] >= balanceBase[_to]
        returns (bool success) 
    {
        if(value> balanceBase[_from])
            revert("error");
        balanceBase[_from] = safe_sub(balanceBase[_from], _value);
        balanceBase[_to] = safe_add(balanceBase[_to],_value);
        success=true;
        return success;
    }

    function safetranfer_token_pub(address _to, uint _value) public
        tx_reverts(value> balanceToken[sender])
        post new(balanceToken)[sender] <=balanceToken[sender]
        && new (balanceToken)[_to] >= balanceToken[_to]
        returns (bool success) 
    {
        if(value> balanceToken[sender])
            revert("error");
        balanceToken[sender] = safe_sub(balanceToken[sender], _value);
        balanceToken[_to] = safe_add(balanceToken[_to],_value);
        success=true;
        return success;
    }

    function safetranfer_token(address _to,address _from, uint _value) private 
        tx_reverts(value> balanceToken[_from])
        post new(balanceToken)[_from] <=balanceToken[_from]
        && new (balanceToken)[_to] >= balanceToken[_to]
        returns (bool success) 
    {
        if(value> balanceToken[_from])
            revert("error");
        balanceToken[_from] = safe_sub(balanceToken[_from], _value);
        balanceToken[_to] = safe_add(balanceToken[_to],_value);
        success=true;
        return success;
    }

    function addLiquidityForMember() public 
        post new(baseAmount)>=baseAmount
        && new(tokenAmount)>=tokenAmount
        returns(uint liquidityUnits)
    {
        if (balanceBase[th]<=(baseAmount) || balanceToken[th]<=tokenAmount)
            revert("eerror");            
        uint _actualInputBase = safe_sub(balanceBase[th],baseAmount);
        uint _actualInputToken = safe_sub(balanceToken[th],tokenAmount);
        
       //liquidityUnits = safe_div(safe_mul(_actualInputBase+_actualInputToken,totalSupply),baseAmount+tokenAmount);

        baseAmount = safe_add(baseAmount,_actualInputBase);
        tokenAmount = safe_add(baseAmount,_actualInputToken);
        balancePool [sender]= safe_add(balancePool[sender],liquidityUnits);

        return liquidityUnits;
    }
    spec removePost(uint a,uint b, uint c, uint d, uint e){
        a==b && 
        c==d && 
        e==0 
    }


    function removeLiquidity() public 
    post removePost(new(baseAmount),new(balanceBase)[th],new(tokenAmount),new(balanceToken)[th], 
        new(balancePool)[sender],) 
    modifies[baseAmount,tokenAmount,balanceBase,balanceToken,balancePool]
    {
       
       
        if(baseAmount==0 || tokenAmount==0 || balanceBase[sender]>0)
            revert("Error"); 
        address member= sender;
        uint outputBase =  safe_div(safe_mul(balancePool[sender],balanceBase[th]),totalSupply) ;
        uint outputToken = safe_div(safe_mul(balancePool[sender],balanceToken[th]),totalSupply) ;
        balancePool[sender]=0;
        baseAmount = baseAmount-(outputBase);
        tokenAmount = tokenAmount-(outputToken); 
    
        safetranfer_base(member,th,outputBase);
        safetranfer_token(member, th,outputToken);
        
        return;
    }

    
}




